plugins {
	id 'org.springframework.boot' version '2.7.3'
	id 'io.spring.dependency-management' version '1.0.13.RELEASE'
	id 'java'
}

group = 'com.phoenix'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'


	//오라클로 테스트 하기 위한 dependencies
	//implementation 'com.oracle.database.jdbc:ojdbc8'
	//implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
}

tasks.named('test') {
	useJUnitPlatform()
}




//아래는 리액트 빌드 부분
//리액트 빌드가 오래걸리거나 intellij에서 빌드 안하려면 아래 주석처리하거나 
//if문 false로 변경

if(true){
	def webappDir = "$projectDir/frontend"

	sourceSets {
		main {
			resources {
				srcDirs = ["$webappDir/build", "$projectDir/src/main/resources"]
			}
		}
	}

	processResources {
		dependsOn "copyWebApp"
	}

	task copyWebApp(type: Copy) {
		dependsOn "buildReact"
		from "$webappDir/build"
		into "$projectDir/src/main/resources/static"
	}

	task buildReact(type: Exec) {
		dependsOn "installReact"
		workingDir "$webappDir"
		inputs.dir "$webappDir"
		group = BasePlugin.BUILD_GROUP
		if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
			commandLine "npm.cmd", "run-script", "build"
		} else {
			commandLine "npm.cmd", "run-script", "build"
		}
	}

	task installReact(type: Exec) {
		workingDir "$webappDir"
		inputs.dir "$webappDir"
		group = BasePlugin.BUILD_GROUP
		if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
			commandLine "npm.cmd", "audit", "fix", "--force"
			commandLine "npm.cmd", "install", "--legacy-peer-deps" //or "--force"
//			commandLine "npm.cmd", "audit", "fix"
//			commandLine 'npm.cmd', 'install'
		} else {
			commandLine "npm.cmd", "audit", "fix", "--force"
			commandLine "npm.cmd", "install", "--legacy-peer-deps" //or "--force"
//			commandLine "npm", "audit", "fix"
//			commandLine 'npm', 'install'
		}
	}
}